[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "dbcan"
version = "3.1"
description = "Standalone version of dbCAN annotation tool for automated CAZyme annotation"
readme = "README.md"
requires-python = ">=3.6"
license = {file = "LICENSE"}
authors = [
    {name = "Le Huang"},
    {name = "Jinfang Zheng"},
    {name = "Haidong Yi"},
    {name = "Qiwei Ge"},
    {name = "Tanner Yohe"},
]
maintainers = [
    {name = "Le Huang", email = "lehuang@unc.edu"},
    {name = "Haidong Yi", email = "haidyi@cs.unc.edu"},
]
dependencies = [
    "numpy>1.19",
    "scipy",
    "pandas",
    "biopython",
    # for debug logging (referenced from the issue template)
    "session-info"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Bio-Informatics"
]

[project.urls]
Documentation = "https://dbcan.readthedocs.io/"
Source = "https://github.com/linnabrown/run_dbcan/"
Home-page = "https://bcb.unl.edu/dbCAN2/"

[project.scripts]
run_dbcan = "dbcan.cli.run_dbcan:cli_main"
cgc_standard2json = "dbcan.cli.cgc_process_json:main"

[project.optional-dependencies]
dev = [
    "pre-commit",
    "twine>=4.0.2"
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "sphinx-book-theme>=1.0.0",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    "sphinxext-opengraph",
    # For notebooks
    "ipykernel",
    "ipython",
    "sphinx-copybutton",
    "sphinx-issues",
    "sphinx-design",
    "sphinx-argparse",
]
test = [
    "pytest",
    "pytest-cov",
]

[tool.coverage.run]
source = ["dbcan"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]

[tool.black]
line-length = 120

[tool.ruff]
src = ["dbcan"]
line-length = 120
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.cruft]
skip = [
    "tests",
    "dbcan/**/__init__.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
]

[tool.pyright]
# venv path and venv name
venvPath = "."
venv = ".venv"

# set project src and include
root = "."

include = "./dbcan/**/*.py"
exclude = [
    "tests/",
    ".venv/",
    "build/"
]

# report missing imports
reportMissingImports = true

# report unused imports
reportUnusedImport = true

typeCheckingMode = "basic"
